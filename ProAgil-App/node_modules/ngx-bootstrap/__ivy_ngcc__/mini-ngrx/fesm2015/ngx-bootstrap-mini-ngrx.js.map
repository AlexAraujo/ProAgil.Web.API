{"version":3,"file":"ngx-bootstrap-mini-ngrx.js","sources":["../../../../src/mini-ngrx/state.class.ts","../../../../src/mini-ngrx/store.class.ts","../../../../src/mini-ngrx/ngx-bootstrap-mini-ngrx.ts"],"names":[],"mappings":";;;MAQa,SAAa,SAAQ,eAAkB;AACnD,IAAC,YACE,aAAgB,EAChB,kBAAsC,EACtC,OAAyB;AACzB,QACA,KAAK,CAAC,aAAa,CAAC,CAAC;AAEzB,QAAI,MAAM,cAAc,GAAG,kBAAkB,CAAC,IAAI,CAC5C,SAAS,CAAC,cAAc,CAAC,CAC1B,CAAC;AACL,QAAG,MAAM,MAAM,GAAG,cAAc,CAAC,IAAI,CAChC,IAAI,CAAC,CAAC,KAAQ,EAAE,MAAc;AACnC,YAAO,IAAI,CAAC,MAAM,EAAE;AACpB,gBAAS,OAAO,KAAK,CAAC;AACtB,aAAQ;AAET,YAAQ,OAAO,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AACrC,SAAM,EACD,aAAa,CACd,CAAC,CAAC;AAEP,QAAI,MAAM,CAAC,SAAS,CAAC,CAAC,KAAQ,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AACpD,KAAE;AACF;AACC;ACjCF;AACC;AACC;AACC,MAIU,SAAa,SAAQ,UAAa;AAAI,IACjD,YACU,WAA6B;AACvC;AACC,IAAS,QAA4B;AACtC;AACC,IAAC,MAAuB;AACvB,QACA,KAAK,EAAE,CAAC;AAEZ,QARY,gBAAW,GAAX,WAAW,CAAkB;AACzC,QACY,aAAQ,GAAR,QAAQ,CAAoB;AACxC,QAKQ,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AAC5B,KAAE;AAEH,IAAE,MAAM,CAAI,WAA4B;AAAK,QACrC,MAAM,OAAO,GAAkB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;AAE1E,QAAI,OAAO,OAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;AAC/C,KAAE;AAEH,IAAE,IAAI,CAAI,QAAwB;AAAK,QACnC,MAAM,KAAK,GAAG,IAAI,SAAS,CAAI,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AACzE,QAAO,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAElC,QAAI,OAAO,KAAK,CAAC;AAChB,KAAE;AAEH,IAAE,QAAQ,CAAC,MAAc;AACxB,QAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACjC,KAAE;AAEH,IAAE,IAAI,CAAC,MAAc;AACpB,QAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACjC,KAAE;AAEH;AACG,IAAD,KAAK,CAAC,GAAQ;AACf,QAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC/B,KAAE;AAEH,IAAE,QAAQ;AACT;AAGD,KAFG;AACF;AACC;AClDF;AACC;AACC;AAEA;AAAE;AACS","sourcesContent":["/**\n * @copyright ngrx\n */\nimport { Action, ActionReducer } from './index';\nimport { BehaviorSubject, Observable, queueScheduler } from 'rxjs';\nimport { observeOn, scan } from 'rxjs/operators';\n\n\nexport class MiniState<T> extends BehaviorSubject<T> {\n  constructor(\n    _initialState: T,\n    actionsDispatcher$: Observable<Action>,\n    reducer: ActionReducer<T>\n  ) {\n    super(_initialState);\n\n    const actionInQueue$ = actionsDispatcher$.pipe(\n      observeOn(queueScheduler)\n    );\n    const state$ = actionInQueue$.pipe(\n      scan((state: T, action: Action) => {\n        if (!action) {\n          return state;\n        }\n\n        return reducer(state, action);\n      },\n      _initialState\n    ));\n\n    state$.subscribe((value: T) => this.next(value));\n  }\n}\n","/**\n * @copyright ngrx\n */\nimport { Observable, Observer, Operator } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { Action, ActionReducer } from './index';\n\nexport class MiniStore<T> extends Observable<T> implements Observer<Action> {\n  constructor(\n    private _dispatcher: Observer<Action>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private _reducer: ActionReducer<any>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    state$: Observable<any>\n  ) {\n    super();\n\n        this.source = state$;\n  }\n\n  select<R>(pathOrMapFn: (state: T) => R): Observable<R> {\n        const mapped$: Observable<R> = this.source.pipe(map(pathOrMapFn));\n\n    return mapped$.pipe(distinctUntilChanged());\n  }\n\n  lift<R>(operator: Operator<T, R>): MiniStore<R> {\n    const store = new MiniStore<R>(this._dispatcher, this._reducer, this);\n        store.operator = operator;\n\n    return store;\n  }\n\n  dispatch(action: Action) {\n    this._dispatcher.next(action);\n  }\n\n  next(action: Action) {\n    this._dispatcher.next(action);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error(err: any) {\n    this._dispatcher.error(err);\n  }\n\n  complete() {\n    /*noop*/\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}